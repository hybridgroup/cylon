---
title: Digispark with Cylon.js
author: The Hybrid Group
page_title: Digispark
page_subtitle: "<a href='https://github.com/hybridgroup/cylon-digispark' class='repository'>Repository</a> <a class+'issues' href='https://github.com/hybridgroup/cylon-digispark/issues'>Issues</a>"
layout: documentation
page_title_show: true
subnav_platform: true
active_menu_platforms: true
breadcrumbs: "<li><a href=''>Digispark</a></li>"

led_driver: true
servo_driver: true
blinkm_driver: true
makey_driver: true
mpl115a2_driver: true
lcd_driver: true
---
-content_for :bredcrumbs do
  = partial "/documentation/platforms/breadcrumbs"

%section.intro
  = image_tag "/images/devices/digispark.jpg", class: "display"
  .info-intro
    %p The Digispark is an Attiny85 based microcontroller development board similar to the Arduino line, only cheaper, smaller, and a bit less powerful. With a whole host of shields to extend its functionality and the ability to use the familiar Arduino IDE the Digispark is a great way to jump into electronics, or perfect for when an Arduino is too big or too much.

    %p
      For more info about the Digispark platform click
      = succeed "." do
        = link_to "here", "http://digistump.com/category/1", target: :blank
  .clear

%section.how-to#HowToInstall
  %h2 How To Install
  %p Installing Cylon.js with digispark support is pretty easy.
  :markdown
        :::bash
        npm install cylon-digispark

%section.how-to#HowToUse
  %h2 How To Use
  %p This small program lets you toggle an LED on and off.
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'digispark', adaptor: 'digispark' },
          device: { name: 'led', driver: 'led', pin: 2 },

          work: function(my) {
            every((1).seconds(), function() { my.led.toggle() });
          }
        }).start();


%section.how-to#HowToConnect
  %h2 How To Connect
  %p
    It is very easy to setup and connect to the Digispark using cylon CLI commands.
  %p
    Connecting to the Digispark
    =link_to "(Kickstarter Campaign)","http://www.kickstarter.com/projects/digistump/digispark-the-tiny-arduino-enabled-usb-dev-board"
    ATTiny-based USB development board is very easy using Cylon, first we need to install the littlewire
    =link_to "(http://littlewire.cc)", "http://littlewire.cc/"
    protocol to communicate with the digispark, Cylon includes CLI commands to make the process of uploading littlewire to the
    digispark as simple as possible, after littlewire has been uploaded you can connect and communicate using Cylon.

  %h3 OSX
  %p The main steps are:
  %ul
    %li Install the cylon-digispark npm module
    %li Upload the Littlewire protocol to the digispark
    %li Connect to the device using Cylon

  %h4 DO NOT plug in the Digispark to your computer's USB port until prompted.

  %p Install the cylon-digispark module:
  :markdown
        :::bash
        $ npm install cylon-digispark

  %p
    After installing the cylon-digispark npm module run the following command to
    upload littlewire to the digispark, plug it to a USB port when prompted:
  :markdown
        :::bash
        $ cylon digispark upload

  %p Once plugged in, use the `cylon scan usb` command to verify your connection info:
  :markdown
        :::bash
        $ cylon digispark scan

  %p
    Now use the `ID` info returned to find the `product` and `vendor` ID's required
    to establish a connection with the Digispark in your Cylon code.

  %p That is it, you are set to start running Cylon digispark examples.

  %h3 Ubuntu
  %p The main steps are:
  %ul
    %li Install the cylon-digispark npm module
    %li
      Add a udev rule to allow access to the Digispark device (Do not worry
      about this, the `cylon littlewire upload` command does it for you if none is detected)
    %li Plug in the Digispark to the USB port
    %li Connect to the device using Cylon

  %h4 DO NOT plug in the Digispark to your computer's USB port until prompted.

  %p Install the cylon-digispark npm module:

  :markdown
        :::bash
        $ npm install cylon-digispark

  %p
    After installing the cylon-digispark module run the following command to
    upload littlewire to the digispark, plug it to a USB port when
    prompted. You might be asked to enter your sudo password, since
    uploading littlewire to the digispark requires some new udev rules, you
    can check and review them in `/etc/udev/rules.d/49-micronucleus.rules`
    after running the `cylon littlewire upload` command:

  :markdown
        :::bash
        $ cylon littlewire upload

  %p Once plugged in, use the `cylon scan usb` command to verify your connection info:

  :markdown
        :::bash
        $ cylon scan usb

  %p
    Now use the `ID` info returned to find the `product` and `vendor` ID's required to
    establish a connection with the Digispark in your cylon code.

  %p That is it, you are set to start running Cylon digispark examples.

  %p
    Thanks to [@bluebie]
    =link_to "https://github.com/Bluebie", "https://github.com/Bluebie"
    for the help with udev rules used when uploading littlewire to the digispark!
    =link_to "(https://github.com/Bluebie/micronucleus-t85/wiki/Ubuntu-Linux)", "https://github.com/Bluebie/micronucleus-t85/wiki/Ubuntu-Linux"

%section.drivers#Drivers
  %h2 Drivers
  %p
    Thanks to
    %b Cylon.js
    and
    %b Node.js
    it is possible to interact with several I/O hardware devices and interfaces connected to the digispark
    using a set of already defined and easy to use drivers, all of this thanks to the Cylon.js architecture,
    in conjuction with Cylon.js-digispark adaptor (using the littlewire communication protocol),
    which makes it even possible to swap the entire platform for something else like arduino,
    and keep using the same code you just wrote for digispark, this just by swapping a couple
    of lines in your program.
  %p Available drivers for the digispark platform are listed below, the drivers contain detailed documentation and examples of what kind physical computing (using Cylon.js and Node.js) you could be doing:

  .hardware
    // TODO: Update drivers list at the top of the page.
    %h2 GPIO Drivers
    .devices
      = partial "documentation/partials/devices_gpio_drivers"
    %h2 i2c Drivers
    .devices
      = partial "documentation/partials/devices_i2c_drivers"
