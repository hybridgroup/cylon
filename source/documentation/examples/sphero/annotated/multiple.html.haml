---
layout: documentation
page_title_show: true
title: "Cylon.JS Example - Multiple Spheros"
page_title: "Example: Multiple Spheros"
author: The Hybrid Group
description: A Cylon.JS code example
page_subtitle: "<a href='https://github.com/hybridgroup/cylon-sphero/tree/master/examples/multiple' target='_blank'>View In Repo</a>"
active_menu_docs: true
breadcrumbs: "<li><a href='#'>Multiple Spheros</a></li>"
---
-content_for :bredcrumbs do
  = partial "/documentation/examples/breadcrumbs"

:markdown
  # Multiple Spheros

  Let's do an example of Cylon controlling multiple Spheros at the same time. The
  Spheros will both randomly roll around and change their colors every second.

  Before we run this example, make sure to have `cylon-sphero` installed (`npm
  install cylon-sphero`)

  First, load up Cylon:

      :::javascript
      var Cylon = require('cylon');

  Since both of our Spheros are going to have faily similar behaviour, we can
  define a class to hold their attributes:

      :::javascript
      var SpheroRobot = (function() {
        function SpheroRobot() {}

  We'll define the Sphero's connection sans port, which we'll add later.

      :::javascript
        SpheroRobot.prototype.connection = { name: 'Sphero', adaptor: 'sphero' };

  Both Spheros have the same device configuration

      :::javascript
        SpheroRobot.prototype.device = { name: 'sphero', driver: 'sphero' };

  Now we can define the work for the Spheros. Every second, they'll print their
  name, change to a random color, and roll in a random direction.

      :::javascript
        SpheroRobot.prototype.work = function(my) {
          every((1).second(), function() {
            console.log(my.name);
            my.sphero.setRandomColor();
            my.sphero.roll(60, Math.floor(Math.random() * 360));
          });
        };

        return SpheroRobot;
      })();

  Next up, let's define what's different about our bots so we can tell them apart
  later on. We'll give them each a different name, and define their connection
  ports.

      :::javascript
      var bots = [
        { name: "Thelma", port: "/dev/rfcomm0" },
        { name: "Louise", port: "/dev/rfcomm1" }
      ];

  Now that the pieces are in place, we can start making our robots.

      :::javascript
      for (var i = 0; i < bots.length; i++) {

  We'll make a new instance of `SpheroRobot`, and modify it.

      :::javascript
        var bot = bots[i];
        var robot = new SpheroRobot;

  Now we'll tell the robot what it's name is, and what it's connection port should
  be:

      :::javascript
        robot.name = bot.name;
        robot.connection.port = bot.port;

  Now our robot's ready, and we can add it to Cylon's collection of robots.

      :::javascript
        Cylon.robot(robot);
      }

  And now that our robots have all been set up, we can start them all at once:

      :::javascript
      Cylon.start();

