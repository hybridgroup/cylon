---
layout: documentation
page_title_show: true
title: "Cylon.JS Example - Sales Force"
page_title: "Example: Sales Force"
author: The Hybrid Group
description: A Cylon.JS code example
page_subtitle: "<a href='https://github.com/hybridgroup/cylon/tree/master/examples/salesforce' target='_blank'>View In Repo</a>"
active_menu_docs: true
breadcrumbs: "<li><a href='#'>Sales Force</a></li>"
---
-content_for :bredcrumbs do
  = partial "/documentation/examples/breadcrumbs"

:markdown
  # Sales Force

  First, let's import Cylon:

      :::javascript
      var Cylon = require('cylon');

  Now that we have Cylon imported, we can start defining our robot

      :::javascript
      Cylon.robot({

  Let's define the connections and devices:

      :::javascript
        connection: {
          name: 'sfcon',
          adaptor: 'force',
          sfuser: process.env.SF_USERNAME,
          sfpass: process.env.SF_SECURITY_TOKEN,
          orgCreds: {
            clientId: process.env.SF_CLIENT_ID,
            clientSecret: process.env.SF_CLIENT_SECRET,
            redirectUri: 'http://localhost:3000/oauth/_callback'
          }
        },

        device: { name: 'salesforce', driver: 'force' },

  Now that Cylon knows about the necessary hardware we're going to be using, we'll
  tell it what work we want to do:

      :::javascript
        work: function(me) {
          me.salesforce.on('start', function() {
            me.salesforce.subscribe('/topic/SpheroMsgOutbound', function(data) {
              var msg = "Sphero: " + data.sobject.Sphero_Name__c + ",";
              msg += "Bucks: " + data.sobject.Bucks__c + ",";
              msg += "SM_Id: " + data.sobject.Id;

              console.log(msg);
            });
          });

          var i = 0;

          every((2).seconds(), function() {
            var data = JSON.stringify({
              spheroName: "" + me.name,
              bucks: "" + i
            });

            me.salesforce.push('SpheroController', 'POST', data);
          });
        }

  Now that our robot knows what work to do, and the work it will be doing that
  hardware with, we can start it:

      :::javascript
      }).start();

