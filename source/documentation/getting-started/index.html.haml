---
page_title_show: true
title: Cylon.js Getting Started
author: The Hybrid Group
description: Cylon.js Getting Started
page_title: Getting Started
page_subtitle: A Guide by Humans, for Humans.
layout: page
breadcrumbs: "<li><a href='/documentation/getting-started'>Getting Started</a></li>"

active_menu_docs: true
---
-content_for :bredcrumbs do
  = partial "/documentation/getting-started/breadcrumbs"

%section.intro

  = partial "../what_is"

%section.how-to
  %h2 How to Install Node.js
  %h3 OSX
  %p 
  Go to the Node.js downloads page at 
  = link_to "http://nodejs.org/download/", "http://nodejs.org/download/", target:"blank"  
  download the installer file and run it.
  %h3 Ubuntu
  %p 
  Follow the installation instructions at 
  =link_to "https://github.com/joyent/node/wiki/Installation", "https://github.com/joyent/node/wiki/Installation", target:"_blank"  
  to install the latest Node.js
  %h3 Windows
  %p 
  Go to the Node.js downloads page at 
  = link_to "http://nodejs.org/download/", "http://nodejs.org/download/", target:"blank"  
  download the installer file and run it.

  %h2 How to Install CoffeeScript (Optional)
  %p 
    If you want to program Cylon.js using CoffeeScript, it is easy to install using NPM, the Node Package Manager:
  :markdown
        :::javascript
        npm install -g coffee-script
  %p 
    You might need to install under the 'root' user by running the above install command using `sudo`.

%section.installation
  %h2 How to Install Cylon.js
  %p
    In order to use Cylon.js, you must install the Cylon.js node modules needed to control your particular hardware setup. For example, to use Cylon.js with an Arduino, you will need to install the `cylon-firmata` module. Check out this example:

  :markdown
        :::javascript
        npm install cylon
        npm install cylon-firmata

  %section.running
  %h2 Cylon.js Robots
  %h3 Writing your robot code:

  %p 
  Now you are ready to write your own code. Take a look at the examples below, or go to the 
  = link_to "examples", "https://github.com/hybridgroup/cylon/tree/master/examples", target:"blank"  
  directory for a whole bunch of code you can use to help get started. We recommend using Test-Driven Robotics (TDR) with your preferred test frameworks.

  %h3 Running your robot:

  :markdown
        :::javascript
        node robotfilename.js

%section.app-code
  %h2 Cylon.js Code Examples

  %h3 Example: Hello
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'looped', adaptor: 'loopback'},

          work: function() {
            every((1).second(), function() { Logger.info("Hello, human!"); });
          }
        }).start();


  %h3 Example: Arduino with LED and a button
  :markdown
    To use this example, you must first run `npm install cylon-firmata`
  :markdown
        :::javascript
       
        var Cylon = require('cylon');

        Cylon.robot({
          connection: { name: 'arduino', adaptor: 'firmata', port: '/dev/ttyACM0' },
          devices: [{name: 'led', driver: 'led', pin: 13},
                    {name: 'button', driver: 'button', pin: 2}],

          work: function(my) {
            my.button.on('push', function() {my.led.toggle()});
          }
        }).start();

  %h3 Parrot ARDrone 2.0
  :markdown
    To use this example, you must first run `npm install cylon-ardrone`
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},
          device: {name: 'drone', driver: 'ardrone'},
          work: function(my) {
            my.drone.takeoff();

            after((10).seconds(), function() {
              my.drone.land();
            }

            after((15).seconds(), function() {
              my.drone.stop();
            }
          }
        }).start();

%h2 CLI

%p Cylon has a Command Line Interface (CLI) so you can access important features right from the command line.
:markdown
      :::bash
      Usage: cylon [command] [options]

        Commands: 
           arduino [subcommand] [opts]
              Install avrdude, and upload sketches to your Arduino

           bluetooth [pair|unpair|connect]
              Scan, pair, unpair bluetooth devices. Establishes serial to Bluetooth connection.

           crazyflie [subcommand] [opts]
              Set udev rules for Crazyflie

           digispark [subcommand]
              Set udev rules, and upload the Littlewire protocol to your Digispark

           help
              Prints help for using the Cylon-CLI commands.

           scan [type]
              Scans serial, Bluetooth, or USB for connected devices

           spark upload [access_token] [device_id] [firmware_file]
              Upload new firmare to your Spark Core


%section.contributing
  %h2 Contributing

  %p 
    You can help cylon grow by contributing your code, new drivers or platforms to the project, check the Github page
    = link_to "cylon on github.","https://github.com/hybridgroup/cylon" 

  %ul
    %li Fork it
    %li Create your feature branch (git checkout -b my-new-feature)
    %li Commit your changes (git commit -am 'Add some feature')
    %li Push to the branch (git push origin my-new-feature)
    %li Create new Pull Request

%section.footer
