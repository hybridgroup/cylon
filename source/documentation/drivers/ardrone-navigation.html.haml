---
title: Cylon.js - ARDrone Navigation Driver
author: The Hybrid Group
page_title: ARDrone Navigation
page_subtitle: Driver
layout: documentation
page_title_show: true

ardrone_platform: true
---

%section.intro
  =image_tag "/images/devices/ardrone-navigation.jpg", class: "display"
  %p
    Allows user to receive in-flight navgation data from an ARDrone. Navigation data includes such information as the ARDrone's current pitch and yaw, along with many other data elements.

%section.how-to
  %h2 How to establish a connection and setup the driver
  %p
    Communication with the ARDrone's navigation data interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.

  %h3 JavaScript
  :markdown
        :::javascript
        var Cylon = require('cylon')

        Cylon.robot({
          connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},

          devices:
            [{name: 'drone', driver: 'ardrone'},
            {name: 'nav', driver: 'ardroneNav'}]
        ...

  %h3 CoffeeScript
  :markdown
        :::javascript
        Cylon = require 'cylon'

        Cylon.robot
          connection:
            name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'

          devices:
            [
              {name: 'drone', driver: 'ardrone'},
              {name: 'nav', driver: 'ardroneNav'}
            ]
        ...

%section.public-methods
  %h2 Events
  %table.commands 
    %tr 
      %th Event
      %th Description
    %tr 
      %td.command 
        %span update
      %td
        This event will contain one of the following events.
        %br/  
        You can also subscribe to one of the specific events, if that is the information you are interested in.
    %tr 
      %td.command 
        %span navdata
      %td Gets triggered every time interval amount of time passes, returns and lets you access a NavData object.
    %tr 
      %td.command 
        %span landing
      %td Gets triggered when is landing.
    %tr 
      %td.command 
        %span landed
      %td Gets triggered when has landing.
    %tr 
      %td.command 
        %span takeoff
      %td Gets triggered when has takeoff.
    %tr 
      %td.command 
        %span hovering
      %td Gets triggered when is hovering.
    %tr 
      %td.command 
        %span flying
      %td Gets triggered when is flying.
    %tr 
      %td.command 
        %span lowBattery
      %td Gets triggered when have low battery.
    %tr 
      %td.command 
        %span batteryChange
      %td Gets triggered when the battery has changed.
    %tr 
      %td.command 
        %span altitudeChange
      %td Gets triggered when the altitude has changed. 
    %tr 
      %td.command 
        %span start
      %td Sent when the device has been started and is ready to use.

  
%section.how-to
  %h2 How to use events and call them on your drivers
  %p Once the connection and the devices have been setup (as explained above) you can receive navigation events on them as follows:

  %h3 JavaScript
  :markdown
        :::javascript
        var Cylon = require('cylon')

        Cylon.robot({
          connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},

          devices:
            [{name: 'drone', driver: 'ardrone'},
            {name: 'nav', driver: 'ardroneNav'}],

          work: function(my) {
            my.drone.config('general:navdata_demo', 'TRUE');

            my.nav.on('update', function(data) {
              Logger.info(data);
            }
          }
        }).start();

  %h3 CoffeeScript
  :markdown
        :::javascript
        Cylon = require 'cylon'

        Cylon.robot
          connection:
            name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'

          devices:
            [
              {name: 'drone', driver: 'ardrone'},
              {name: 'nav', driver: 'ardroneNav'}
            ]

          work: (my) ->
            my.drone.config 'general:navdata_demo', 'TRUE'

            my.nav.on 'update', (data) ->
              Logger.info data

        .start()

%section.compatability.hardware
  %h2 Works with:
  .devices
    = partial "documentation/partials/devices_platforms"
