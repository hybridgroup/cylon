---
title: Cylon.js - ARDrone Driver
author: The Hybrid Group
page_title: ARDrone
page_subtitle: Driver
layout: documentation
page_title_show: true

ardrone_platform: true
---
%section.intro
  =image_tag "/images/devices/ardrone-flight.jpg", class: "display"
  %p
    Allows user to send flight control commands to an ARDrone. Flight control commands are those used to tell the ARDrone to take off, land, and or any number of other autonomous flight manuvers.

%section.how-to
  %h2 How to establish a connection and setup the driver
  %p
    Communication with the ARDrone's flight control interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.
  
  %h3 JavaScript
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},

          device: {name: 'ardrone', driver: 'ardrone'},
        ...

  %h3 CoffeeScript
  :markdown
        :::javascript
        Cylon = require 'cylon'

        Cylon.robot
          connection:
            name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'

          device:
            name: 'ardrone', driver: 'ardrone'
        ...

%section.public-methods
  %h2 Commands:
  %table.commands 
    %tr 
      %th Command (param)
      %th Description
    %tr 
      %td.command takeoff(callback)
      %td.param  
        %p 
          Sets the internal 
          %span fly
          state to 
          %span true, 
          %span callback 
          is invoked after the drone reports that it is hovering.
        
    %tr 
      %td.command land(callback)
      %td.param  
        %p 
          Sets the internal 
          %span fly
          state to 
          %span false, 
          %span callback
          is invoked after the drone reports it has landed.
        
    %tr 
      %td.command stop
      %td.param  
        %p 
          Sets all drone movement commands to
          %span 0
          , making it effectively hover in place.
        
    %tr 
      %td.command up(speed) 
      %td.param  
        %p 
          Makes the drone gain altitude. 
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span up(speed) → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command down(speed) 
      %td.param  
        %p 
          Makes the drone reduce altitude. 
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span down(speed) → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command left(speed)
      %td.param  
        %p 
          Causes the drone to bank to the left, controls the roll, which is a horizontal movement using the camera as a reference point.
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span left(speed) → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command right(speed) 
      %td.param  
        %p 
          Causes the drone to bank to the right, controls the roll, which is a horizontal movement using the camera as a reference point. 
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span right(speed)  → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command front(speed) | forward(speed)
      %td.param  
        %p 
          Causes the drone to bank forward, controls the pitch, which a horizontal movement using the camera as a reference point. 
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span front(speed) | forward(speed)  → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command back(speed) 
      %td.param  
        %p 
          Causes the drone to bank to the back, controls the pitch, which a horizontal movement using the camera as a reference point.
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span back(speed) → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command clockwise 
      %td.param  
        %p 
          Causes the drone to spin.
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span clockwise → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command counterClockwise 
      %td.param  
        %p 
          Causes the drone to spin.
          %br/ 
          %span speed
          can be a value from
          %span 0
          to 
          %span  1.
        %span counterClockwise → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command calibrate(device_num) 
      %td.param  
        %p Asks the drone to calibrate a device.
        %span calibrate(device_num) → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command config(key, value, callback)
      %td.param  
        %p Sends a config command to the drone.
        %span config(key, value, callback) → speed
        %h5 Returns 
        %span speed
    %tr 
      %td.command animate(animation, duration)
      %td.param 
        Performs a pre-programmed flight sequence for a given 
        %span duration
        (in ms). 
        %span animation
        can be one of the following:
        .markdown
          :markdown
                :::javascript
                ['phiM30Deg', 'phi30Deg', 'thetaM30Deg', 'theta30Deg', 'theta20degYaw200deg',
                'theta20degYawM200deg', 'turnaround', 'turnaroundGodown', 'yawShake',
                'yawDance', 'phiDance', 'thetaDance', 'vzDance', 'wave', 'phiThetaMixed',
                'doublePhiThetaMixed', 'flipAhead', 'flipBehind', 'flipLeft', 'flipRight']
        
    %tr 
      %td.command frontFlip
      %td.param  
        %p 
          Tells the drone to do a front-flip. Alias of 
          %span animate('flipAhead', 150).
        
    %tr 
      %td.command backFlip
      %td.param  
        %p 
          Tells the drone to do a back-flip. Alias of 
          %span animate('flipBehind', 150).
        
    %tr 
      %td.command leftFlip
      %td.param  
        %p 
          Tells the drone to do a left-flip. Alias of
          %span animate('flipLeft', 150).
        
    %tr 
      %td.command rightFlip
      %td.param  
        %p 
          Tells the drone to do a right-flip. Alias of
          %span animate('flipRight', 150).
        
    %tr 
      %td.command wave
      %td.param  
        %p 
          Tells the drone to do a wave. Alias of
          %span animate('wave', 750).
        
    %tr 
      %td.command animateLeds(animation, hz, duration)
      %td.param 
        Performs a pre-programmed led sequence at given  
        %span hz
        frequency and 
        %span duration
        (in sec!). 
        %span animation 
        can be one of the following:
        .markdown
          :markdown
                :::javascript
                ['blinkGreenRed', 'blinkGreen', 'blinkRed', 'blinkOrange', 'snakeGreenRed',
                'fire', 'standard', 'red', 'green', 'redSnake', 'blank', 'rightMissile',
                'leftMissile', 'doubleMissile', 'frontLeftGreenOthersRed',
                'frontRightGreenOthersRed', 'rearRightGreenOthersRed',
                'rearLeftGreenOthersRed', 'leftGreenRightRed', 'leftRedRightGreen',
                'blinkStandard']
        
    %tr 
      %td.command disableEmergency
      %td.param  
        %p 
          Causes the emergency REF bit to be set to 1 until 
          %span navdata.droneState.emergencyLanding is 0. 
          %br/ 
          This recovers a drone that has flipped over and is showing red lights to be flyable again and show green lights. It is also done implicitly when creating a new high level client.
        %span disableEmergency() → integer_value
        %h5 Returns 
        %span integer_value
    %tr 
      %td.command forward
      %td.param  
        %p Causes the drone to go forward.
        %h5 Returns 
        %span nothing
    %tr 
      %td.command frontFlip
      %td.param  
        %p Causes the drone to do a front flip.
        %h5 Returns 
        %span nothing
    %tr 
      %td.command backFlip
      %td.param  
        %p Causes the drone to do a back flip.
        %h5 Returns 
        %span nothing
    %tr 
      %td.command leftFlip
      %td.param  
        %p Causes the drone to do a left flip.
        %h5 Returns 
        %span nothing
    %tr 
      %td.command rightFlip
      %td.param  
        %p Causes the drone to do a right flip.
        %h5 Returns 
        %span nothing


  %h2 Events
  %table.commands 
    %tr 
      %th Event
      %th Description
    %tr 
      %td.command 
        %span start
      %td Sent when the device has been started and is ready to use.

%section.how-to
  %h2 How to use
  %p 
    This example controls an ARDrone to take off, and then land.

  %h3 JavaScript
  :markdown
        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          connection: {name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'},
          device: {name: 'drone', driver: 'ardrone'},
          work: function(my) {
            my.drone.takeoff();

            after((10).seconds(), function() {
              my.drone.land();
            }

            after((15).seconds(), function() {
              my.drone.stop();
            }
          }
        }).start();

  %h3 CoffeeScript
  :markdown
        :::javascript
        Cylon = require 'cylon'

        Cylon.robot
          connection:
            name: 'ardrone', adaptor: 'ardrone', port: '192.168.1.1'

          device:
            name: 'drone', driver: 'ardrone'

          work: (my) ->
            my.drone.takeoff()

            after 10.seconds(), ->
              my.drone.land()

            after 15.seconds(), ->
              my.drone.stop()

        .start()

%section.compatability.hardware
  %h2 Works with:
  .devices
    = partial "documentation/partials/devices_platforms"
