---
title: Cylon.js API
author: The Hybrid Group
page_title: API
page_subtitle: "The Cylon API provides an interface for retrieving information and communicating with the currently running robots."
layout: documentation
page_title_show: true
active_menu_docs: true
breadcrumbs: "<li><a href='/documentation/api'>API Server</a></li>"
---
-content_for :bredcrumbs do
  = partial "/documentation/getting-started/breadcrumbs"
  
.api
  :markdown
    ## How To Connect

    Cylon comes with a built-in API server so you can view details about your
    robots and control them from anywhere.

    ### Running your robot:

    The following code example will spin up an API server:

        :::javascript
        var Cylon = require('..');

        Cylon.robot({
          connection: { name: 'looped', adaptor: 'loopback'},

          work: function() {
            every((1).second(), function() { console.log("Hello, human!"); });
          }
        });

        Cylon.start();

    `Cylon.start();` automatically starts up the API server.

    ## How To Configure

    The Cylon.js API server allows for port, host, SSL and auth configuration.

    In your scripts, you can set it up like this:

        :::javascript
        Cylon.api(
          host: '127.0.0.1',
          port: '4321',

          cert: '/path/to/ssl/cert',
          key: '/path/to/ssl/key',

          auth: {
            type: 'basic',
            user: 'admin',
            pass: 'pass'
          }
        )

    If you run a Cylon script with this code in it, it will start an API server
    listening on `https://127.0.0.1:4321`, that will require basic auth for all
    routes.

    By default, an unconfigured API instance will listen on
    `https://127.0.0.1:3000`, using a self-signed cert and with no
    authentication.

    ## Routes

    For this example, we'll be using a basic Cylon robot, hooked up to an Arduino
    and a Leap Motion:

        :::javascript
        var Cylon = require('cylon');

        Cylon.robot({
          name: "TestBot",

          connections: [
            { name: 'leapmotion', adaptor: 'leapmotion', port: '127.0.0.1:6437' },
            { name: 'arduino', adaptor: 'firmata', port: '/dev/tty.usbmodem1421' }
          ],

          devices: [
            { name: 'leapmotion', driver: 'leapmotion', connection: 'leapmotion' },
            { name: 'led', driver: 'led', pin: 13, connection: 'arduino' }
          ],

          commands: ["hello"],

          work: function(my) {
            every((10).seconds(), my.led.toggle);
          },

          hello: function(greeting) {
            return greeting + " world";
          }
        });

        Cylon.start();

    With this setup, Cylon will serve the API at https://localhost:3000. Now, lets
    run through the routes.

    ### GET /

    This route will serve up a copy of [Robeaux][], hooked up to the API and
    allowing you to control your robots and devices.

    [Robeaux]: https://github.com/hybridgroup/robeaux

    <a href="/images/screenshots/api-robeaux.png" target="_blank">
      <img alt="Angular App Screenshot" src="/images/screenshots/api-robeaux.png">
    </a>

    ### GET /robots

    Returns a JSON array containing information on all robots:

        :::javascript
        // GET /robots
        [
          {
            "name": "TestBot",
            "connections": [
              {
                "name": "leapmotion",
                "port": "127.0.0.1:6437",
                "adaptor": "LeapMotion",
                "connection_id": 9835
              },
              {
                "name": "arduino",
                "port": "/dev/tty.usbmodem1421",
                "adaptor": "Firmata",
                "connection_id": 1234
              }
            ],
            "devices": [
              {
                "name": "leapmotion",
                "driver": "LeapMotion",
                "connection": {
                  "name": "leapmotion",
                  "port": "127.0.0.1:6437",
                  "adaptor": "LeapMotion",
                  "connection_id": 9835
                },
                "commands": []
              },
              {
                "name": "led",
                "driver": "Led",
                "pin": 13,
                "connection": {
                  "name": "arduino",
                  "port": "/dev/tty.usbmodem1421",
                  "adaptor": "Firmata",
                  "connection_id": 1234
                },
                "commands": [
                  "isOn",
                  "turnOn",
                  "turnOff",
                  "toggle",
                  "brightness"
                ]
              }
            ],
            "commands": [
              "hello"
            ]
          }
        ]

    ### GET /robots/:robot

    Returns more details about a specific robot:

        :::javascript
        // GET /robots/TestBot
        {
          "name": "TestBot",
          "connections": [
            {
              "name": "leapmotion",
              "port": "127.0.0.1:6437",
              "adaptor": "LeapMotion",
              "connection_id": 9835
            },
            {
              "name": "arduino",
              "port": "/dev/tty.usbmodem1421",
              "adaptor": "Firmata",
              "connection_id": 1234
            }
          ],
          "devices": [
            {
              "name": "leapmotion",
              "driver": "LeapMotion",
              "connection": {
                "name": "leapmotion",
                "port": "127.0.0.1:6437",
                "adaptor": "LeapMotion",
                "connection_id": 9835
              },
              "commands": []
            },
            {
              "name": "led",
              "driver": "Led",
              "pin": 13,
              "connection": {
                "name": "arduino",
                "port": "/dev/tty.usbmodem1421",
                "adaptor": "Firmata",
                "connection_id": 1234
              },
              "commands": [
                "isOn",
                "turnOn",
                "turnOff",
                "toggle",
                "brightness"
              ]
            }
          ],
          "commands": [
            "hello"
          ]
        }

    ### GET /robots/:robot/commands

    Returns a JSON array of commands the robot has defined:

        :::javascript
        // GET /robots/TestBot/commands
        [
          "hello"
        ]

    ### ALL /robots/:robot/commands/:command

    Executes a robot's command. Commands can be supplied as query params or
    (preferably) a JSON object in a POST body.

    Returns a JSON object, the 'result' key is the return value of the command.

        :::javascript
        // GET /robots/TestBot/commands/hello?greeting=hello
        {
          "result": "hello world"
        }

        // POST /robots/TestBot/commands/hello
        // { greeting: "Hello," }
        {
          "result": "Hello, world"
        }

    ### GET /robots/:robot/devices

    Returns an array of the robot's devices.

        :::javascript
        // GET /robots/TestBot/devices
        [
          {
            "name": "leapmotion",
            "driver": "LeapMotion",
            "connection": {
              "name": "leapmotion",
              "port": "127.0.0.1:6437",
              "adaptor": "LeapMotion",
              "connection_id": 9835
            },
            "commands": []
          },
          {
            "name": "led",
            "driver": "Led",
            "pin": 13,
            "connection": {
              "name": "arduino",
              "port": "/dev/tty.usbmodem1421",
              "adaptor": "Firmata",
              "connection_id": 1234
            },
            "commands": [
              "isOn",
              "turnOn",
              "turnOff",
              "toggle",
              "brightness"
            ]
          }
        ]

    ### GET /robots/:robot/devices/:device

    Returns a JSON object containing specific information about a particular device.

        :::javascript
        // GET /robots/TestBot/devices/led
        {
          "name": "led",
          "driver": "Led",
          "pin": 13,
          "connection": {
            "name": "arduino",
            "port": "/dev/tty.usbmodem1421",
            "adaptor": "Firmata",
            "connection_id": 1234
          },
          "commands": [
            "isOn",
            "turnOn",
            "turnOff",
            "toggle",
            "brightness"
          ]
        }

    ### GET /robots/:robot/devices/:device/commands

    Returns a JSON array of the commands the device has registered.

        :::javascript
        // GET /robots/TestBot/devices/led/commands
        [
          "isOn",
          "turnOn",
          "turnOff",
          "toggle",
          "brightness"
        ]

    ### ALL /robots/:robot/devices/:device/commands/:command

    Executes a command on the robot's device. Params can be passed via query params
    or (preferably) as a JSON object in the POST body.

    Returns a JSON object. If the method returns anything, the result will be in the
    'result' field.

        :::javascript
        // GET /robots/TestBot/devices/led/commands/turnOn
        {}

    ### GET /robots/:robot/devices/:device/events/:event

    Opens a long-held Server-Sent Events connection that will stream event data as
    it comes in from the device. This can be hooked up in a browser by using
    [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).

    Once the connection is opened, event data is emitted as it's received as a JSON
    string.

        :::javascript
        // GET /robots/TestBot/devices/leapmotion/events/hand
        data: "{ /* data in JSON format here */ }"

        data: "{ /* data in JSON format here */ }"

    ### GET /robots/:robot/connections

    Returns a JSON array containing information on all the connections the robot
    has.

        :::javascript
        // GET /robots/TestBot/connections
        [
          {
            "name": "leapmotion",
            "port": "127.0.0.1:6437",
            "adaptor": "LeapMotion",
            "connection_id": 4190
          },
          {
            "name": "arduino",
            "port": "/dev/tty.usbmodem1421",
            "adaptor": "Firmata",
            "connection_id": 8366
          }
        ]

    ### GET /robots/:robot/connections/:connection

    Returns a JSON object containing information on a specific robot's connection.

        :::javascript
        // GET /robots/TestBot/connections/leapmotion
        {
          "name": "leapmotion",
          "port": "127.0.0.1:6437",
          "adaptor": "LeapMotion",
          "connection_id": 4190
        }
